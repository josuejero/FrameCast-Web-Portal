===== ./.pytest_cache/README.md =====
# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.
===== ./templates/index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;800&display=swap">
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <title>Digital Photo Frame Ecosystem</title>
</head>
<body>
    <header class="navbar">
        <a href="/" class="navbar-item highlight">DEVICE MANAGER</a>
        <a href="/device-editor" class="navbar-item">DEVICE EDITOR</a>
        <a href="/photo-editor" class="navbar-item">PHOTO EDITOR</a>
    </header>
    <main class="main-content">
        <section class="devices-section">
            <h2 class="section-title">DISCOVERED DEVICES</h2>
            <div id="discovered-devices" class="device-list"></div>
            <button class="action-button" onclick="findNewDevices()">FIND NEW DEVICES</button>
            <button class="action-button" onclick="inviteToNetwork()">INVITE TO NETWORK</button>
        </section>
        <section class="devices-section">
            <h2 class="section-title">NETWORKED DEVICES</h2>
            <div class="device-list-header">
                <p>Device Name</p>
                <p>Device Type</p>
                <p>Status</p>
                <p>IP Address</p>
            </div>
            <div id="networked-devices" class="device-list"></div>
        </section>
    </main>
    <script src="{{ url_for('static', filename='app.js') }}"></script>
</body>
</html>
===== ./templates/photo_editor.html =====
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;800&display=swap">
    <link rel="stylesheet" href="{{ url_for('static', filename='style_photo_editor.css') }}">
    <title>Photo Editor</title>
</head>

<body>
    <header class="navbar">
        <a href="/" class="navbar-item">DEVICE MANAGER</a>
        <a href="/device-editor" class="navbar-item">DEVICE EDITOR</a>
        <a href="/photo-editor" class="navbar-item highlight">PHOTO EDITOR</a>
    </header>
    <main class="main-content">
        <section class="photo-list-section">
            <h2 class="section-title">PHOTOS</h2>
            <div class="photo-list">
                <label><input type="radio" name="photo"> Photo1</label>
                <label><input type="radio" name="photo"> Photo2</label>
                <label><input type="radio" name="photo"> Photo3</label>
                <label><input type="radio" name="photo"> Photo4</label>
                <label><input type="radio" name="photo"> Photo5</label>
                <label><input type="radio" name="photo"> Photo6</label>
                <label><input type="radio" name="photo"> Photo7</label>
                <label><input type="radio" name="photo"> Photo8</label>
                <label><input type="radio" name="photo"> Photo9</label>
                <label><input type="radio" name="photo"> Photo10</label>
                <label><input type="radio" name="photo"> Photo11</label>
                <label><input type="radio" name="photo"> Photo12</label>
            </div>
            <button class="action-button upload-button">UPLOAD NEW PHOTOS</button>
        </section>
        <section class="photo-display-panel">
            <div class="photo-controls">
                <button class="action-button rotate-ccw">ROTATE CCW</button>
                <button class="action-button rotate-cw">ROTATE CW</button>
                <button class="action-button scale">SCALE</button>
                <input type="number" class="scale-input" value="100" min="10" max="100">
                <span>%</span>
                <button class="action-button save">SAVE</button>
            </div>
            <h2 class="section-title">Photo Display</h2>
            <div class="photo-container">
                <img src="path/to/your/image.jpg" alt="Preview" class="preview-image">
                <div class="window-box"></div>
            </div>
        </section>
    </main>
    <script src="{{ url_for('static', filename='photo-editor-app.js') }}"></script>
</body>

</html>
===== ./templates/device_editor.html =====
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;800&display=swap">
    <link rel="stylesheet" href="{{ url_for('static', filename='style_device_editor.css') }}">
    <title>Device Editor</title>
</head>

<body>
    <header class="navbar">
        <a href="/" class="navbar-item">DEVICE MANAGER</a>
        <a href="/device-editor" class="navbar-item highlight">DEVICE EDITOR</a>
        <a href="/photo-editor" class="navbar-item">PHOTO EDITOR</a>
    </header>
    <main class="main-content">
        <section class="photo-list-section">
            <h2 class="section-title">PHOTOS</h2>
            <div class="photo-list" id="photo-list">
                <!-- Photos will be dynamically populated here -->
            </div>
            <div class="preview">
                <h3>PREVIEW</h3>
                <img src="path/to/your/image.jpg" alt="Preview" class="preview-image" id="photo-preview">
            </div>
        </section>
        <button class="action-button add-to-devices">ADD TO DEVICES</button>
        <section class="device-list-section">
            <h2 class="section-title">DEVICES</h2>
            <div class="device-list" id="device-list">
                <!-- Devices will be dynamically populated here -->
            </div>
        </section>
        <section class="device-config-pane">
            <h2 class="section-title">DEVICE CONFIGURATION</h2>
            <div class="config-item">
                <label for="device-name">Device Name:</label>
                <input type="text" id="device-name" name="device-name">
            </div>
            <div class="config-item">
                <label for="photo-update-frequency">Photo Update Frequency (seconds):</label>
                <input type="number" id="photo-update-frequency" name="photo-update-frequency" min="0" max="999">
            </div>
            <div class="config-item">
                <label for="random-order">Randomize Order:</label>
                <input type="checkbox" id="random-order" name="random-order">
            </div>
            <div class="config-item">
                <h3>PAIRED PHOTOS</h3>
                <div class="assigned-photo-list" id="assigned-photo-list">
                    <!-- Paired photos will be dynamically populated here -->
                </div>
                <div class="button-group">
                    <button class="action-button move-up">MOVE UP</button>
                    <button class="action-button move-down">MOVE DOWN</button>
                    <button class="action-button remove">REMOVE</button>
                </div>
                <div class="preview">
                    <img src="path/to/your/image.jpg" alt="Preview" class="preview-image" id="assigned-photo-preview">
                </div>
            </div>
            <button class="action-button save-config">SAVE DEVICE CONFIGURATION</button>
        </section>
    </main>
    <script src="{{ url_for('static', filename='device-editor-app.js') }}"></script>
</body>

</html>
===== ./test_config.py =====
import os
basedir = os.path.abspath(os.path.dirname(__file__))

class TestConfig:
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
===== ./test_app.py =====
import unittest
from app import app, db, get_ip_address

class FlaskTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_simulated_photo_config(self):
        response = self.app.get('/api/simulated_photo_config')
        self.assertEqual(response.status_code, 200)
        self.assertIn('photo_id', response.json)

    def test_simulated_photos(self):
        response = self.app.get('/api/simulated_photos')
        self.assertEqual(response.status_code, 200)
        self.assertIn('1', response.json)

    def test_get_ip_address(self):
        ip_address, fqdn = get_ip_address()
        self.assertIsNotNone(ip_address)
        self.assertIsNotNone(fqdn)

    def test_map_url(self):
        response = self.app.get('/api/map_url')
        self.assertEqual(response.status_code, 200)
        self.assertTrue(response.json['success'])

if __name__ == '__main__':
    unittest.main()
===== ./test_device_model.py =====
import unittest
from app import app, db, Device
from test_config import TestConfig

class DeviceModelTestCase(unittest.TestCase):
    def setUp(self):
        app.config.from_object(TestConfig)
        self.app = app.test_client()
        with app.app_context():
            db.create_all()

    def tearDown(self):
        with app.app_context():
            db.session.remove()
            db.drop_all()

    def test_create_device(self):
        with app.app_context():
            new_device = Device(device_name="Test Device", device_type="Agent", status="Online")
            db.session.add(new_device)
            db.session.commit()
            self.assertIsNotNone(new_device.id)
            self.assertEqual(new_device.device_name, "Test Device")
            print(f"Created device with ID: {new_device.id}")

    def test_read_device(self):
        with app.app_context():
            new_device = Device(device_name="Test Device", device_type="Agent", status="Online")
            db.session.add(new_device)
            db.session.commit()
            device = Device.query.filter_by(device_name="Test Device").first()
            self.assertIsNotNone(device)
            self.assertEqual(device.device_name, "Test Device")
            print(f"Read device with ID: {device.id}")

    def test_update_device(self):
        with app.app_context():
            new_device = Device(device_name="Test Device", device_type="Agent", status="Online")
            db.session.add(new_device)
            db.session.commit()
            device = Device.query.filter_by(device_name="Test Device").first()
            self.assertIsNotNone(device)
            device.status = "Offline"
            db.session.commit()
            updated_device = Device.query.filter_by(device_name="Test Device").first()
            self.assertEqual(updated_device.status, "Offline")
            print(f"Updated device with ID: {updated_device.id}")

    def test_delete_device(self):
        with app.app_context():
            new_device = Device(device_name="Test Device", device_type="Agent", status="Online")
            db.session.add(new_device)
            db.session.commit()
            device = Device.query.filter_by(device_name="Test Device").first()
            self.assertIsNotNone(device)
            db.session.delete(device)
            db.session.commit()
            deleted_device = Device.query.filter_by(device_name="Test Device").first()
            self.assertIsNone(deleted_device)
            print("Deleted device successfully")

if __name__ == '__main__':
    unittest.main()
===== ./README.md =====
# FrameCast Web Portal

## Overview

The FrameCast project involves creating a browser-based web portal for managing the FrameCast digital photo frames. The web portal runs on the principal device's Raspberry Pi 4 OS and allows users to configure devices, upload photos, and edit photo display settings.

## Features

- **Device Manager**: Discover and manage digital photo frames over Bluetooth and WiFi.
- **Device Editor**: Configure device settings and assign photos to devices.
- **Photo Editor**: Edit photo display settings such as rotation, scaling, and windowing.

## Technologies Used

- **Python**
- **Flask**
- **Flask-SQLAlchemy**
- **Flask-Migrate**
- **SQLite**
- **HTML**
- **CSS**
- **JavaScript**

## Getting Started

### Prerequisites

- Python 3.x
- Flask
- Flask-SQLAlchemy
- Flask-Migrate

### Installation

1. Clone the repository:
    ```bash
    git clone https://github.com/josuejero/FrameCast-Web-Portal.git
    cd framecast-web-portal
    ```

2. Set up a virtual environment and activate it:
    ```bash
    python3 -m venv venv
    source venv/bin/activate
    ```

3. Install dependencies:
    ```bash
    pip install Flask Flask-SQLAlchemy Flask-Migrate
    ```

4. Initialize and migrate the database:
    ```bash
    flask db init
    flask db migrate -m "Initial migration with ip_address column"
    flask db upgrade
    ```

5. Run the Flask application:
    ```bash
    sudo python3 app.py
    ```

6. Open your browser and navigate to:
    ```
    http://<your-raspberry-pi-ip>:5000
    ```

## Project Structure

    
    framecast-web-portal/
    │
    ├── app.py # Flask application
    ├── templates/
    │ ├── index.html # Device Manager page
    │ ├── device_editor.html # Device Editor page
    │ ├── photo_editor.html # Photo Editor page
    │
    ├── static/
    │ ├── style.css # General styles
    │ ├── style_device_editor.css # Device Editor styles
    │ ├── style_photo_editor.css # Photo Editor styles
    │ ├── device-editor-app.js # JavaScript for Device Editor
    │ ├── photo-editor-app.js # JavaScript for Photo Editor
    │
    ├── migrations/ # Database migration scripts
    │
    └── README.md
    

## API Endpoints

### Device Manager

- **GET /api/find_discoverable_bluetooth_devices**: Finds discoverable Bluetooth devices.
- **POST /api/invite_to_network**: Invites discovered devices to the network.
- **GET /api/enumerate_wifi_devices**: Enumerates WiFi devices.

### Device Editor

- **GET /api/get_all_devices**: Retrieves all devices in the ecosystem.
- **POST /api/save_device_config**: Saves the configuration of a device.

### Photo Editor

- **GET /api/get_all_photos**: Retrieves all photos on the Principal.
- **POST /api/upload_photo**: Uploads a new photo to the Principal.
- **GET /api/get_photo/<int:photo_id>**: Retrieves details of a specific photo.
- **POST /api/save_photo_config**: Saves the configuration of a photo.

## Usage

### Device Manager

1. **Find New Devices**: Click the "Find New Devices" button to discover Bluetooth devices.
2. **Invite to Network**: Click the "Invite to Network" button to add the selected devices to the network.

### Device Editor

1. **Configure Devices**: Select a device to edit its settings.
2. **Assign Photos**: Select photos and assign them to devices.

### Photo Editor

1. **Edit Photos**: Select a photo to edit its display settings.
2. **Upload New Photos**: Click the "Upload New Photos" button to add photos to the Principal.

## Contributing

Contributions are welcome! Please fork the repository and submit pull requests.

## License

This project is licensed under the MIT License. See the LICENSE file for details.

## Acknowledgements

- Flask
- SQLite
- JavaScript

===== ./migrations/env.py =====
import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
===== ./migrations/versions/c7e6147d997f_add_photo_update_frequency_and_random_.py =====
"""Add photo_update_frequency and random_order to Device model

Revision ID: c7e6147d997f
Revises: 
Create Date: 2024-06-01 14:06:11.953731

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c7e6147d997f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('device', schema=None) as batch_op:
        batch_op.add_column(sa.Column('photo_update_frequency', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('random_order', sa.Boolean(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('device', schema=None) as batch_op:
        batch_op.drop_column('random_order')
        batch_op.drop_column('photo_update_frequency')

    # ### end Alembic commands ###
===== ./static/style_photo_editor.css =====
/* General Styles */
body {
  font-family: 'Inter', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #fff;
  text-align: center;
  display: flex;
  flex-direction: column;
}

/* Navbar Styles */
.navbar {
  display: flex;
  justify-content: space-around;
  padding: 20px;
  background-color: #d9d9d9;
  border-bottom: 4px solid #000;
  width: 100%;
  box-sizing: border-box;
}

.navbar-item {
  margin: 0;
  padding: 5px;
  font-size: 24px;
  font-weight: 800;
  cursor: pointer;
  text-decoration: none; /* Remove underline */
  color: inherit; /* Remove blue color */
  transition: transform 0.3s ease, color 0.3s ease;
}

.navbar-item:hover {
  transform: scale(1.1);
  color: #ff6f61;
}

.navbar-item.highlight {
  background-color: #ffeb3b;
  padding: 5px;
  border-radius: 5px;
}

/* Main Content Styles */
.main-content {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: space-around;
  padding: 20px;
  gap: 20px;
  width: 100%;
  box-sizing: border-box;
}

.section-title {
  font-size: 24px;
  font-weight: 800;
  margin-bottom: 20px;
}

/* Photo Editor Specific Styles */
.photo-list-section,
.photo-display-panel {
  display: flex;
  flex-direction: column;
  align-items: center;
  border: 4px solid #000;
  padding: 20px;
  background-color: #d9d9d9;
  box-sizing: border-box;
  flex: 1;
}

.photo-list {
  display: flex;
  flex-direction: column;
  gap: 5px;
  margin-bottom: 20px;
}

.photo-controls {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
}

.action-button {
  padding: 10px 20px;
  margin: 10px;
  border: none;
  background-color: #a9a9a9;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.action-button:hover {
  background-color: #8c8c8c;
  transform: scale(1.05);
}

.scale-input {
  width: 60px;
  text-align: center;
  padding: 5px;
  border: 1px solid #000;
}

.photo-container {
  position: relative;
  width: 80%;
  height: 0;
  padding-bottom: 45%;
  border: 2px solid #000;
  overflow: hidden;
}

.preview-image {
  position: absolute;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.window-box {
  position: absolute;
  border: 2px solid red;
  width: 50%;
  height: 50%;
  top: 25%;
  left: 25%;
}

/* Responsive Styles */
@media screen and (max-width: 1200px) {
  .main-content {
    flex-direction: column;
    align-items: center;
  }

  .photo-list-section,
  .photo-display-panel {
    width: 100%;
  }

  .preview-image {
    width: 80px;
    height: 80px;
  }
}

@media screen and (max-width: 768px) {
  .main-content {
    flex-direction: column;
    align-items: center;
    padding: 10px;
  }

  .photo-list-section,
  .photo-display-panel {
    width: 100%;
    padding: 10px;
  }

  .section-title {
    font-size: 20px;
  }

  .preview-image {
    width: 60px;
    height: 60px;
  }

  .action-button {
    padding: 5px;
    font-size: 14px;
  }

  .scale-input {
    width: 50px;
  }
}

@media screen and (max-width: 480px) {
  .main-content {
    padding: 5px;
  }

  .photo-list-section,
  .photo-display-panel {
    padding: 5px;
  }

  .section-title {
    font-size: 14px;
  }

  .preview-image {
    width: 50px;
    height: 50px;
  }

  .action-button {
    padding: 3px;
    font-size: 12px;
  }

  .scale-input {
    width: 40px;
  }
}


@media screen and (max-width: 768px) {
  .navbar-item {
      font-size: 18px;
      margin: 10px 0;
  }
}
===== ./static/style_device_editor.css =====
body {
  font-family: 'Inter', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #fff;
  text-align: center;
  display: flex;
  flex-direction: column;
}

.navbar {
  display: flex;
  justify-content: space-around;
  padding: 20px;
  background-color: #d9d9d9;
  border-bottom: 4px solid #000;
  width: 100%;
  box-sizing: border-box;
  text-decoration: none;
}

.navbar-item {
  margin: 0;
  padding: 5px;
  font-size: 24px;
  font-weight: 800;
  cursor: pointer;
  text-decoration: none;
  color: inherit;
  transition: transform 0.3s ease, color 0.3s ease;
}

.navbar-item:hover {
  transform: scale(1.1);
  color: #ff6f61;
}

.navbar-item.highlight {
  background-color: #ffeb3b;
  padding: 5px;
  border-radius: 5px;
}

.main-content {
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 20px;
  gap: 10px;
  width: 100%;
  box-sizing: border-box;
}

.section-title {
  font-size: 20px;
  font-weight: 800;
}

.photo-list-section,
.device-list-section,
.device-config-pane {
  display: flex;
  flex-direction: column;
  align-items: center;
  border: 4px solid #000;
  padding: 10px;
  background-color: #d9d9d9; /* Gray background */
  box-sizing: border-box;
  flex: 1;
}

.photo-list,
.device-list,
.assigned-photo-list {
  display: flex;
  flex-direction: column;
  gap: 5px;
  padding: 10px;
}

.config-item,
.button-group {
  margin-bottom: 10px;
}

.action-button{
  padding: 10px 20px;
  margin: 10px;
  border: none;
  background-color: #a9a9a9;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.action-button:hover {
  background-color: #8c8c8c;
  transform: scale(1.05);
}

.preview-image {
  width: 100px;
  height: 100px;
}

.preview {
  display: flex;
  flex-direction: column;
  align-items: center;
}

@media screen and (max-width: 1200px) {
  .main-content {
    flex-direction: column;
    align-items: center;
  }

  .photo-list-section,
  .device-list-section,
  .device-config-pane {
    width: 100%;
  }

  .preview-image {
    width: 80px;
    height: 80px;
  }
}

@media screen and (max-width: 768px) {
  .main-content {
    flex-direction: column;
    align-items: center;
    padding: 10px;
  }

  .photo-list-section,
  .device-list-section,
  .device-config-pane {
    width: 100%;
    padding: 5px;
  }

  .section-title {
    font-size: 20px;
  }

  .preview-image {
    width: 60px;
    height: 60px;
  }

  .action-button {
    font-size: 14px;
  }
}

@media screen and (max-width: 480px) {
  .main-content {
    padding: 5px;
  }

  .photo-list-section,
  .device-list-section,
  .device-config-pane {
    padding: 10px;
  }

  .section-title {
    font-size: 20px;
  }

  .preview-image {
    width: 50px;
    height: 50px;
  }

  .action-button {
    padding: 3px;
    font-size: 14px;
  }
}

@media screen and (max-width: 768px) {
  .navbar {
      flex-direction: row;
      align-items: center;
  }
}

@media screen and (max-width: 768px) {
  .navbar-item {
      font-size: 18px;
      margin: 10px 0;
  }
}
===== ./static/style.css =====
body {
  font-family: 'Inter', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #fff;
  text-align: center;
  display: flex;
  flex-direction: column;
}

.navbar {
  display: flex;
  justify-content: space-around;
  padding: 20px;
  background-color: #d9d9d9;
  border-bottom: 4px solid #000;
  width: 100%;
  box-sizing: border-box;
  text-decoration: none;
}

.navbar-item {
  margin: 0;
  padding: 5px;
  font-size: 24px;
  font-weight: 800;
  cursor: pointer;
  transition: transform 0.3s ease, color 0.3s ease;
  text-decoration: none;
  color: inherit;
}

.navbar-item:hover {
  transform: scale(1.1);
  color: #ff6f61;
}

.highlight {
  background-color: #ffeb3b;
  padding: 5px;
  border-radius: 5px;
}

.main-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  gap: 10px;
  width: 100%;
  box-sizing: border-box;
}

.devices-section {
  width: 80%;
  border: 4px solid #000;
  padding: 20px;
  background-color: #d9d9d9;
  box-sizing: border-box;
}

.section-title {
  font-size: 24px;
  font-weight: 800;
  margin-bottom: 20px;
}

.device-list-header {
  display: flex;
  justify-content: space-around;
  padding: 10px 0;
  background-color: #ccc;
  border-bottom: 2px solid #000;
  font-weight: 800;
}

.device-list {
  margin-bottom: 20px;
}

.device-item {
  margin-bottom: 10px;
  font-size: 16px;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 10px;
  padding: 10px;
  border-bottom: 1px solid #000;
}

.action-button {
  padding: 10px 20px;
  margin: 10px;
  border: none;
  background-color: #a9a9a9;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.action-button:hover {
  background-color: #8c8c8c;
  transform: scale(1.05);
}

@media screen and (max-width: 768px) {
  .navbar {
    flex-direction: row;
    align-items: center;
  }

  .navbar-item {
    font-size: 18px;
    margin: 10px 0;
  }

  .devices-section {
    width: 100%;
    padding: 10px;
  }

  .section-title {
    font-size: 20px;
  }

  .device-item,
  .action-button {
    font-size: 14px;
  }

  .device-list-header {
    flex-direction: row;
    align-items: center;
  }
}

@media screen and (max-width: 600px) {
  .device-list-header {
    display: row;
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
  }

  .device-list-header p {
    font-size: 14px;
  }
}
===== ./static/photo-editor-app.js =====
function getAllPhotos() {
console.log("Fetching all photos...");
fetch('/api/get_all_photos')
    .then(response => response.json())
    .then(data => {
        console.log("Photos fetched:", data);
        let photoList = document.querySelector('.photo-list');
        photoList.innerHTML = '';
        for (let id in data) {
            let photo = data[id];
            photoList.innerHTML += `<label><input type="radio" name="photo" value="${id}"> ${photo.photo_name}</label>`;
        }
    })
    .catch(error => console.error('Error fetching photos:', error));
}

function getPhotoConfig(photo_id) {
console.log(`Fetching photo config for ${photo_id}...`);
fetch(`/api/get_photo/${photo_id}`)
    .then(response => response.json())
    .then(data => {
        console.log("Photo config fetched:", data);
        document.querySelector('.preview-image').src = data.path;
        document.querySelector('.rotate-ccw').dataset.photoId = data.photo_id;
        document.querySelector('.rotate-cw').dataset.photoId = data.photo_id;
        document.querySelector('.scale').dataset.photoId = data.photo_id;
        document.querySelector('.save').dataset.photoId = data.photo_id;
    })
    .catch(error => console.error('Error fetching photo config:', error));
}

function uploadPhoto() {
console.log("Uploading new photo...");
// Simulate photo upload
let newPhoto = {
    photo_name: "New Photo",
    path: "path/to/new_photo.jpg"
};
fetch('/api/upload_photo', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(newPhoto)
})
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Photo uploaded successfully');
            getAllPhotos(); // Refresh photo list
        }
    })
    .catch(error => console.error('Error uploading photo:', error));
}

function savePhotoConfig(photo_id) {
let rotation = document.querySelector('.rotate-ccw').dataset.rotation || 0;
let scaling = document.querySelector('.scale-input').value;
let window = {x: 0, y: 0}; // Simulate window position

let photoConfig = {
    photo_id: photo_id,
    rotation: rotation,
    scaling: scaling,
    window: window
};

console.log("Saving photo config:", photoConfig);

fetch('/api/save_photo_config', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(photoConfig)
})
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Photo configuration saved successfully');
        }
    })
    .catch(error => console.error('Error saving photo configuration:', error));
}

document.addEventListener('DOMContentLoaded', () => {
console.log("Document loaded, fetching initial data...");
getAllPhotos();
});

document.addEventListener('DOMContentLoaded', () => {
    fetch('/api/simulated_photos')
        .then(response => response.json())
        .then(data => {
            let photoList = document.querySelector('.photo-list');
            photoList.innerHTML = '';
            for (let id in data) {
                let photo = data[id];
                photoList.innerHTML += `<label><input type="radio" name="photo" value="${id}"> ${photo.photo_name}</label>`;
            }
        })
        .catch(error => console.error('Error fetching photos:', error));

    document.querySelector('.photo-list').addEventListener('change', (event) => {
        if (event.target.name === 'photo') {
            fetch('/api/simulated_photo_config')
                .then(response => response.json())
                .then(data => {
                    document.querySelector('.preview-image').src = data.path;
                    document.querySelector('.rotate-ccw').dataset.photoId = data.photo_id;
                    document.querySelector('.rotate-cw').dataset.photoId = data.photo_id;
                    document.querySelector('.scale').dataset.photoId = data.photo_id;
                    document.querySelector('.save').dataset.photoId = data.photo_id;
                })
                .catch(error => console.error('Error fetching photo config:', error));
        }
    });
});

document.querySelector('.upload-button').addEventListener('click', uploadPhoto);

document.querySelector('.photo-list').addEventListener('change', (event) => {
if (event.target.name === 'photo') {
    getPhotoConfig(event.target.value);
}
});

document.querySelector('.save').addEventListener('click', (event) => {
savePhotoConfig(event.target.dataset.photoId);
});
===== ./static/app.js =====
let discoveredDevices = {};

document.addEventListener('DOMContentLoaded', () => {
    findWiFiDevices();
});

function findNewDevices() {
    fetch('/api/find_discoverable_bluetooth_devices')
        .then(response => response.json())
        .then(data => {
            discoveredDevices = data;
            let discoveredDevicesElement = document.getElementById('discovered-devices');
            if (discoveredDevicesElement) {
                discoveredDevicesElement.innerHTML = '';
                for (let mac in data) {
                    let device = data[mac];
                    discoveredDevicesElement.innerHTML += `<p>${device.device_name}</p>`;
                }
            } else {
                console.error('Element "discovered-devices" not found');
            }
        })
        .catch(error => console.error('Error finding new devices:', error));
}

function inviteToNetwork() {
    fetch('/api/invite_to_network', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(Object.keys(discoveredDevices))
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log("Devices successfully invited to network");
                findWiFiDevices();
            } else {
                console.log("Failed to invite devices");
            }
        })
        .catch(error => console.error("Error inviting devices:", error));
}

function findWiFiDevices() {
    fetch('/api/enumerate_wifi_devices')
        .then(response => response.json())
        .then(data => {
            let networkedDevices = document.getElementById('networked-devices');
            if (networkedDevices) {
                networkedDevices.innerHTML = '';
                for (let sn in data) {
                    let device = data[sn];
                    networkedDevices.innerHTML += `
                        <div class="device-item">
                            <p>${device.device_name}</p>
                            <p>${device.device_type}</p>
                            <p>${device.status}</p>
                            <p>${device.ip_address}</p>
                        </div>`;
                }
            } else {
                console.error('Element "networked-devices" not found');
            }
        })
        .catch(error => console.error('Error finding WiFi devices:', error));
}
===== ./static/device-editor-app.js =====
document.addEventListener('DOMContentLoaded', () => {
    console.log("Document loaded, fetching initial data...");
    getAllPhotos();
    getAllDevices();
});

function getAllPhotos() {
    console.log("Fetching all photos...");
    fetch('/api/get_all_photos')
        .then(response => response.json())
        .then(data => {
            console.log("Photos fetched:", data);
            let photoList = document.getElementById('photo-list');
            photoList.innerHTML = '';
            for (let id in data) {
                let photo = data[id];
                photoList.innerHTML += `<label><input type="checkbox" name="photo" value="${id}"> ${photo.photo_name}</label>`;
            }
        })
        .catch(error => console.error('Error fetching photos:', error));
}

function getAllDevices() {
    console.log("Fetching all devices...");
    fetch('/api/get_all_devices')
        .then(response => response.json())
        .then(data => {
            console.log("Devices fetched:", data);
            let deviceList = document.getElementById('device-list');
            deviceList.innerHTML = '';
            for (let id in data) {
                let device = data[id];
                deviceList.innerHTML += `<label><input type="checkbox" name="device" value="${id}"> ${device.device_name}</label>`;
            }
        })
        .catch(error => console.error('Error fetching devices:', error));
}

function saveDeviceConfig() {
    let deviceName = document.getElementById('device-name').value;
    let photoUpdateFrequency = document.getElementById('photo-update-frequency').value;
    let randomOrder = document.getElementById('random-order').checked;

    let deviceConfig = {
        device_name: deviceName,
        photo_update_frequency: photoUpdateFrequency,
        random_order: randomOrder
    };

    console.log("Saving device configuration:", deviceConfig);

    fetch('/api/save_device_config', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(deviceConfig)
    })
        .then(response => response.json())
        .then(data => {
            console.log("Save response:", data);
            if (data.success) {
                alert('Device configuration saved successfully');
            }
        })
        .catch(error => console.error('Error saving device configuration:', error));
}

function addToDevices() {
    let selectedPhotos = Array.from(document.querySelectorAll('input[name="photo"]:checked')).map(input => input.value);
    let selectedDevices = Array.from(document.querySelectorAll('input[name="device"]:checked')).map(input => input.value);

    if (selectedPhotos.length === 0 || selectedDevices.length === 0) {
        alert("Please select at least one photo and one device.");
        return;
    }

    console.log("Adding Photos to Devices", selectedPhotos, selectedDevices);

    fetch('/api/add_photos_to_devices', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            photo_ids: selectedPhotos,
            device_ids: selectedDevices
        })
    })
        .then(response => response.json())
        .then(data => {
            console.log("Add photos response:", data);
            if (data.success) {
                alert('Photos successfully added to devices');
            }
        })
        .catch(error => console.error('Error adding photos to devices:', error));
}

document.querySelector('.add-to-devices').addEventListener('click', addToDevices);
document.querySelector('.save-config').addEventListener('click', saveDeviceConfig);

function movePhoto(direction) {
    let selectedPhotoId = document.querySelector('.assigned-photo-list input[name="assigned-photo"]:checked')?.value;
    if (!selectedPhotoId) {
        alert("Please select a photo to move.");
        return;
    }

    console.log(`Moving photo ${selectedPhotoId} ${direction}`);

    fetch(`/api/move_photo/${selectedPhotoId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ direction })
    })
        .then(response => response.json())
        .then(data => {
            console.log("Move photo response:", data);
            if (data.success) {
                getAllPhotos();
            }
        })
        .catch(error => console.error(`Error moving photo ${direction}:`, error));
}

document.querySelector('.move-up').addEventListener('click', () => movePhoto('up'));
document.querySelector('.move-down').addEventListener('click', () => movePhoto('down'));

function removePhoto() {
    let selectedPhotoId = document.querySelector('.assigned-photo-list input[name="assigned-photo"]:checked')?.value;
    if (!selectedPhotoId) {
        alert("Please select a photo to remove.");
        return;
    }

    console.log(`Removing photo ${selectedPhotoId}`);

    fetch(`/api/remove_photo/${selectedPhotoId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => response.json())
        .then(data => {
            console.log("Remove photo response:", data);
            if (data.success) {
                getAllPhotos();
            }
        })
        .catch(error => console.error(`Error removing photo:`, error));
}

document.querySelector('.remove').addEventListener('click', removePhoto);
===== ./test_db.py =====
from app import app, db, Photo

# Ensure the app context is available
with app.app_context():
    # Create a new photo
    new_photo = Photo(photo_name="Test Photo", path="/path/to/test_photo.jpg")
    db.session.add(new_photo)
    db.session.commit()

    # Read the photo
    photo = Photo.query.first()
    print(f"Photo: {photo.photo_name}, Path: {photo.path}")

    # Update the photo
    photo.rotation = 90
    db.session.commit()
    updated_photo = Photo.query.first()
    print(f"Updated Photo Rotation: {updated_photo.rotation}")

    # Delete the photo
    db.session.delete(photo)
    db.session.commit()

    # Verify deletion
    deleted_photo = Photo.query.first()
    if deleted_photo is None:
        print("Photo deleted successfully")
    else:
        print("Photo deletion failed")
===== ./app.py =====
from flask import Flask, render_template, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import socket
import subprocess
import netifaces as ni

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///photos.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
migrate = Migrate(app, db)

class Photo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    photo_name = db.Column(db.String(100), nullable=False)
    path = db.Column(db.String(200), nullable=False)
    rotation = db.Column(db.Integer, default=0)
    scaling = db.Column(db.Integer, default=100)
    window_x = db.Column(db.Integer, default=0)
    window_y = db.Column(db.Integer, default=0)

class Device(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_name = db.Column(db.String(100), nullable=False)
    device_type = db.Column(db.String(50), nullable=False)
    status = db.Column(db.String(50), nullable=False)
    ip_address = db.Column(db.String(50), nullable=False)
    photo_update_frequency = db.Column(db.Integer, default=0)
    random_order = db.Column(db.Boolean, default=False)

class PhotoDevice(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    photo_id = db.Column(db.Integer, db.ForeignKey('photo.id'), nullable=False)
    device_id = db.Column(db.Integer, db.ForeignKey('device.id'), nullable=False)
    
@app.route('/api/simulated_photo_config', methods=['GET'])
def get_simulated_photo_config():
    simulated_response = {
        "photo_id": 1,
        "photo_name": "Simulated Photo",
        "rotation": 0,
        "scaling": 100,
        "window": (0, 0)
    }
    return jsonify(simulated_response)

@app.route('/api/simulated_photos', methods=['GET'])
def get_simulated_photos():
    simulated_photos = {
        1: {"photo_name": "Photo1", "path": "path/to/photo1.jpg"},
        2: {"photo_name": "Photo2", "path": "path/to/photo2.jpg"}
    }
    return jsonify(simulated_photos)

# Function to get IP address
def get_ip_address():
    hostname = socket.gethostname()
    fqdn = socket.getfqdn()

    # Get the local IP address using netifaces
    try:
        interfaces = ni.interfaces()
        for interface in interfaces:
            if ni.AF_INET in ni.ifaddresses(interface):
                ip_address = ni.ifaddresses(interface)[ni.AF_INET][0]['addr']
                # Exclude loopback address
                if ip_address != '127.0.0.1':
                    break
    except Exception as e:
        print(f"Error getting IP address: {e}")
        ip_address = None

    return ip_address, fqdn

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/device-editor')
def device_editor():
    return render_template('device_editor.html')

@app.route('/photo-editor')
def photo_editor():
    return render_template('photo_editor.html')

@app.route('/api/find_discoverable_bluetooth_devices', methods=['GET'])
def find_discoverable_bluetooth_devices():
    global discovered_devices
    discovered_devices = {
        "00:11:22:33:44:55": {"device_name": "Device1", "device_type": "Agent", "status": "Online", "ip_address": "192.168.1.2"},
        "00:11:22:33:44:56": {"device_name": "Device2", "device_type": "Agent", "status": "Offline", "ip_address": "192.168.1.3"}
    }
    return jsonify(discovered_devices)

@app.route('/api/invite_to_network', methods=['POST'])
def invite_to_network():
    global discovered_devices
    data = request.json
    print(f"Inviting devices: {data}")

    for mac in data:
        device = discovered_devices.get(mac)
        if device:
            print(f"Adding device: {device}")
            new_device = Device(
                device_name=device['device_name'],
                device_type=device['device_type'],
                status=device['status'],
                ip_address=device['ip_address']
            )
            db.session.add(new_device)
    
    db.session.commit()
    return jsonify({"success": True})

@app.route('/api/enumerate_wifi_devices', methods=['GET'])
def enumerate_wifi_devices():
    devices = Device.query.all()
    devices_dict = {
        device.id: {
            "device_name": device.device_name,
            "device_type": device.device_type,
            "status": device.status,
            "ip_address": device.ip_address
        }
        for device in devices
    }
    return jsonify(devices_dict)

@app.route('/api/get_all_photos', methods=['GET'])
def get_all_photos():
    photos = Photo.query.all()
    photos_dict = {photo.id: {"photo_name": photo.photo_name, "path": photo.path} for photo in photos}
    return jsonify(photos_dict)

@app.route('/api/get_all_devices', methods=['GET'])
def get_all_devices():
    devices = Device.query.all()
    devices_dict = {device.id: {"device_name": device.device_name, "device_type": device.device_type, "status": device.status} for device in devices}
    return jsonify(devices_dict)

@app.route('/api/get_photo/<photo_id>', methods=['GET'])
def get_photo(photo_id):
    photo = Photo.query.get(photo_id)
    if photo:
        photo_data = {
            "photo_id": photo.id,
            "photo_name": photo.photo_name,
            "rotation": photo.rotation,
            "scaling": photo.scaling,
            "window": (photo.window_x, photo.window_y)
        }
        return jsonify(photo_data)
    else:
        return jsonify({"error": "Photo not found"}), 404

@app.route('/api/upload_photo', methods=['POST'])
def upload_photo():
    data = request.json
    print(f"Uploading photo: {data}")
    new_photo = Photo(photo_name=data['photo_name'], path=data['path'])
    db.session.add(new_photo)
    db.session.commit()
    return jsonify({"success": True})

@app.route('/api/save_device_config', methods=['POST'])
def save_device_config():
    data = request.json
    print(f"Saving device config: {data}")
    device = Device.query.filter_by(device_name=data['device_name']).first()
    if device:
        device.photo_update_frequency = data['photo_update_frequency']
        device.random_order = data['random_order']
        db.session.commit()
        return jsonify({"success": True})
    else:
        return jsonify({"error": "Device not found"}), 404

@app.route('/api/add_photos_to_devices', methods=['POST'])
def add_photos_to_devices():
    data = request.json
    print(f"Adding photos to devices: {data}")
    photo_ids = data.get('photo_ids', [])
    device_ids = data.get('device_ids', [])
    for photo_id in photo_ids:
        for device_id in device_ids:
            new_photo_device = PhotoDevice(photo_id=photo_id, device_id=device_id)
            db.session.add(new_photo_device)
    db.session.commit()
    return jsonify({"success": True})

@app.route('/api/move_photo/<photo_id>', methods=['POST'])
def move_photo(photo_id):
    direction = request.json.get('direction')
    print(f"Moving photo {photo_id} {direction}")
    return jsonify({"success": True})

@app.route('/api/remove_photo/<photo_id>', methods=['DELETE'])
def remove_photo(photo_id):
    print(f"Removing photo {photo_id}")
    return jsonify({"success": True})

@app.route('/api/get_ip_address', methods=['GET'])
def get_ip():
    ip_address, fqdn = get_ip_address()
    return jsonify({'ip_address': ip_address, 'fqdn': fqdn})

def map_url_to_ip(ip_address):
    url = f"http://{ip_address}:5000"
    # You can update the system's hosts file or use a DNS server to map the URL to this IP
    # For example, updating /etc/hosts (Linux/Mac):
    try:
        with open('/etc/hosts', 'a') as f:
            f.write(f"{ip_address}\tframecast.local\n")
        print(f"Mapped {url} to framecast.local")
    except Exception as e:
        print(f"Error mapping URL to IP: {e}")
        
@app.route('/api/map_url', methods=['GET'])
def map_url():
    ip_address, _ = get_ip_address()
    map_url_to_ip(ip_address)
    return jsonify({'success': True})

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True, host='0.0.0.0')
